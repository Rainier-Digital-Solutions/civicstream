import { OpenAI } from "openai";
import { ChatCompletionMessageParam } from "openai/resources/chat/completions";
import { ChatCompletionTool } from "openai/resources/chat/completions";

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface SearchResult {
  title: string;
  snippet: string;
  url: string;
}

// The compliance review prompt
const COMPLIANCE_REVIEW_PROMPT = `
You are a city plan reviewer for municipalities in the Greater Seattle area. Your task is to review architectural plans and provide a structured JSON response.

IMPORTANT: You MUST respond with ONLY a valid JSON object. Do not include any explanatory text before or after the JSON. The response must be parseable by JSON.parse().

BEFORE analyzing the plans, you MUST use the web_search function to retrieve the latest building codes and regulations. This is REQUIRED for every review.

Your response will be used to automatically generate emails, so it must follow this exact format:

{
  "summary": "Concise summary of the review and overall compliance.",
  "criticalFindings": [ { "description": "...", "codeSection": "...", "remedialAction": "...", "confidenceScore": 0.95, "severity": "critical" }, ... ],
  "majorFindings": [ { "description": "...", "codeSection": "...", "remedialAction": "...", "confidenceScore": 0.85, "severity": "major" }, ... ],
  "minorFindings": [ { "description": "...", "codeSection": "...", "remedialAction": "...", "confidenceScore": 0.75, "severity": "minor" }, ... ],
  "totalFindings": 0,
  "isCompliant": true,
  "cityPlannerEmailBody": "<HTML email body for the city planner>",
  "submitterEmailBody": "<HTML email body for the submitter>"
}

Both cityPlannerEmailBody and submitterEmailBody must use the following HTML/CSS style and structure:
- A large, bold header at the top (blue for compliant, red for action required)
- A horizontal line below the header
- A short introductory paragraph
- A green 'Review Summary' subheader
- The summary text
- A blue box with rounded corners containing:
  - A bold 'Finding Counts' subheader
  - A bulleted list of counts for critical, major, minor, and total findings
- A full, detailed list of all findings, sorted by severity (critical, major, minor) and logically grouped together. Each finding should include its description, code section, severity, confidence score, and remedial action. This detailed list must be present in both emails.
- (For submitter only) A section for 'Next Steps' with a numbered list
- A gray footer paragraph in small text

The footer must be as follows:
- For compliant plans (isCompliant: true):
  This email was automatically generated by CivicStream. The attached plan has been reviewed by AI and meets the requirements for direct submission to city planning.
- For non-compliant plans (isCompliant: false):
  This email was automatically generated by CivicStream. The attached plan has been reviewed by AI and does not meet the requirements for direct submission to city planning.

Use this structure and style for both emails, only changing the header color/text, intro, content, and footer as appropriate for each recipient and compliance status. Use inline CSS for all styling. Do not include any other text in your response except the JSON object.

To perform the review:

1. Extract or utilize a provided address and parcel number from uploaded PDF architectural plans to identify the specific municipality and applicable codes, cross-checking the address with the parcel number to ensure accuracy. These are required for every set of plans and must be included in the web search query. They are typically found in the top right corner of the plans. The plans will include either the city name, county name, parcel number, or a combination of these. The web search query should include the city name, county name, or both.

2. Use web search capabilities to access and verify the most current international building code, municipal zoning code, and state and local zoning and planning codes as of the submission date based on the identified municipality.

3. Analyze the plans, which include a scale, compass, legend, and a general information table, along with accompanying documents (e.g., full plan sets, required inspection certificates, surveys, stormwater management plans, traffic studies).

4. For each finding, provide:
   - A clear description of the issue
   - The specific code section violated (with section numbers and hyperlinks if available)
   - Severity ("critical", "major", or "minor")
   - Confidence score (0.0â€“1.0)
   - Explicit remedial actions to comply with the code

5. The cityPlannerEmailBody should:
   - Be addressed to a city planner
   - Confirm compliance status
   - List any minor findings
   - Use a professional tone

6. The submitterEmailBody should:
   - Be addressed to the plan submitter
   - List all findings (critical, major, minor)
   - Include a 'Next Steps' section with:
     1. Review all findings in detail
     2. Make the necessary corrections to your plans
     3. Resubmit your corrected plans through our system
   - Use a supportive, professional tone

REMEMBER: Your response must be ONLY a valid JSON object. Only include the JSON object. If you encounter an error, return an empty array for each finding type as a valid JSON object. You must always return the expected JSON object.
`;

export interface ReviewFinding {
  description: string;
  codeSection: string;
  severity: "critical" | "major" | "minor";
  confidenceScore: number;
  remedialAction: string;
}

export interface ReviewResult {
  summary: string;
  criticalFindings: ReviewFinding[];
  majorFindings: ReviewFinding[];
  minorFindings: ReviewFinding[];
  totalFindings: number;
  isCompliant: boolean;
  cityPlannerEmailBody: string;
  submitterEmailBody: string;
}

async function performWebSearch(query: string, maxResults: number): Promise<SearchResult[]> {
  if (!process.env.SERPAPI_API_KEY) {
    console.error('[OpenAI] SerpAPI key not found in environment variables');
    return [];
  }

  try {
    const url = `https://serpapi.com/search.json?engine=google&q=${encodeURIComponent(query)}&api_key=${process.env.SERPAPI_API_KEY}`;
    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(`SerpAPI request failed with status ${response.status}`);
    }

    const data = await response.json();

    // Extract organic results from SerpAPI response
    const results = data.organic_results?.slice(0, maxResults).map((item: any) => ({
      title: item.title,
      snippet: item.snippet,
      url: item.link,
    })) ?? [];

    console.log(`[OpenAI] SerpAPI search returned ${results.length} results for query: ${query}`);
    return results;
  } catch (error) {
    console.error('[OpenAI] Error performing web search:', error);
    return [];
  }
}

export async function reviewArchitecturalPlan(
  pdfBase64: string,
  projectDetails: {
    address: string;
    parcelNumber: string;
    city: string;
    county: string;
    projectSummary?: string;
  },
  maxRetries: number = 3
): Promise<ReviewResult> {
  console.log('[OpenAI] Starting architectural plan review');
  console.log('[OpenAI] Base64 length:', pdfBase64.length);

  let attempts = 0;
  let lastError: Error | null = null;

  while (attempts < maxRetries) {
    try {
      // Build the initial conversation with structured project details
      const baseMessages: ChatCompletionMessageParam[] = [
        { role: "system", content: COMPLIANCE_REVIEW_PROMPT },
        {
          role: "user",
          content: `
Project Details:
Address: ${projectDetails.address}
Parcel Number: ${projectDetails.parcelNumber}
City: ${projectDetails.city}
County: ${projectDetails.county}
${projectDetails.projectSummary ? `Project Summary: ${projectDetails.projectSummary}` : ''}

[PDF Architectural Plan - Base64 Length: ${pdfBase64.length}]

Please analyze these plans and use the web_search tool to find applicable building codes and regulations for this location. Focus on the specific pages provided in this chunk.`,
        },
      ];

      const tools: ChatCompletionTool[] = [
        {
          type: "function",
          function: {
            name: "web_search",
            description: "Search the web for current building codes and regulations based on identified municipality. Priority should be given to the identified city first, then county, then the state, then international building codes.",
            parameters: {
              type: "object",
              properties: {
                search_query: {
                  type: "string",
                  description: "The search query to look up building codes and regulations"
                }
              },
              required: ["search_query"]
            }
          }
        }
      ];

      console.log(`[OpenAI] Attempt ${attempts + 1}/${maxRetries}: Sending initial request to OpenAI`);
      const response = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: baseMessages,
        tools,
        tool_choice: "auto",
        max_tokens: 4096,
        stream: false
      });

      console.log('[OpenAI] Received response from OpenAI');
      const message = response.choices[0].message;

      if (!message.tool_calls?.[0]) {
        console.warn('[OpenAI] No web search tool call received in first response');
        throw new Error('No web search tool call received');
      }

      // Process all tool calls
      const toolCalls = message.tool_calls;
      const toolResponses: ChatCompletionMessageParam[] = [];

      for (const toolCall of toolCalls) {
        if (toolCall.function.name === 'web_search') {
          const args = JSON.parse(toolCall.function.arguments);
          console.log('[OpenAI] Web search query:', args.search_query);

          const searchResults = await performWebSearch(args.search_query, 5);
          console.log('[OpenAI] Web search returned', searchResults.length, 'results');

          toolResponses.push({
            role: "tool",
            tool_call_id: toolCall.id,
            content: JSON.stringify({
              search_results: searchResults,
              instruction: "Use these search results to determine applicable code sections and identify any violations in the plans. Ensure all findings reference specific code sections from the search results."
            })
          });
        }
      }

      // Create a streaming response for the final analysis
      const stream = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          ...baseMessages,
          message,
          ...toolResponses,
          {
            role: "user",
            content: "Please analyze the architectural plans using the building codes and regulations found in the search results. Compare the plans against these codes to identify any compliance issues. Provide a detailed review following the required JSON format."
          }
        ],
        stream: true
      });

      let fullResponse = '';
      for await (const chunk of stream) {
        const content = chunk.choices[0]?.delta?.content || '';
        fullResponse += content;
      }

      console.log('[OpenAI] Raw response length:', fullResponse.length);

      try {
        const result = JSON.parse(fullResponse);
        console.log('[OpenAI] Successfully parsed JSON response');

        // Enhanced validation of the response structure
        if (!result.summary || !Array.isArray(result.criticalFindings) ||
          !Array.isArray(result.majorFindings) || !Array.isArray(result.minorFindings) ||
          typeof result.totalFindings !== 'number' || typeof result.isCompliant !== 'boolean' ||
          !result.cityPlannerEmailBody || !result.submitterEmailBody) {
          throw new Error('Invalid response structure from AI');
        }

        // Validate findings consistency
        if (!result.isCompliant && result.totalFindings === 0) {
          console.warn('[OpenAI] Inconsistent response: isCompliant=false but totalFindings=0');
        }

        // Validate that findings reference code sections
        const allFindings = [...result.criticalFindings, ...result.majorFindings, ...result.minorFindings];
        const findingsWithoutCodeSections = allFindings.filter(f => !f.codeSection);
        if (findingsWithoutCodeSections.length > 0) {
          console.warn('[OpenAI] Found findings without code section references:', findingsWithoutCodeSections.length);
        }

        return {
          summary: result.summary,
          criticalFindings: result.criticalFindings,
          majorFindings: result.majorFindings,
          minorFindings: result.minorFindings,
          totalFindings: result.totalFindings,
          isCompliant: result.isCompliant,
          cityPlannerEmailBody: result.cityPlannerEmailBody,
          submitterEmailBody: result.submitterEmailBody
        };
      } catch (parseError) {
        console.error(`[OpenAI] Attempt ${attempts + 1} failed to parse JSON:`, parseError);
        console.error('[OpenAI] Raw response that failed to parse:', fullResponse);
        lastError = parseError instanceof Error ? parseError : new Error('Failed to parse AI response as JSON');

        if (attempts === maxRetries - 1) {
          return getDefaultErrorResponse();
        }
      }
    } catch (error) {
      console.error(`[OpenAI] Attempt ${attempts + 1} failed with error:`, error);
      lastError = error instanceof Error ? error : new Error('Unknown error occurred');

      if (attempts === maxRetries - 1) {
        return getDefaultErrorResponse();
      }
    }

    attempts++;
    if (attempts < maxRetries) {
      await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
    }
  }

  throw lastError || new Error('Failed to process plan after all retry attempts');
}

function getDefaultErrorResponse(): ReviewResult {
  return {
    summary: "Unable to process the plan due to technical difficulties. Please try again.",
    criticalFindings: [],
    majorFindings: [],
    minorFindings: [],
    totalFindings: 0,
    isCompliant: false,
    cityPlannerEmailBody: `<div style="color: red; font-size: 24px; font-weight: bold;">Technical Error</div>
      <hr>
      <p>We encountered a technical error while processing your plan. Please try submitting again.</p>
      <div style="background-color: #e6f3ff; padding: 15px; border-radius: 5px;">
        <h3 style="color: #0066cc;">Review Summary</h3>
        <p>Unable to process the plan due to technical difficulties.</p>
      </div>
      <div style="font-size: 12px; color: #666; margin-top: 20px;">
        This email was automatically generated by CivicStream. The plan could not be processed due to technical difficulties.
      </div>`,
    submitterEmailBody: `<div style="color: red; font-size: 24px; font-weight: bold;">Technical Error</div>
      <hr>
      <p>We encountered a technical error while processing your plan. Please try submitting again.</p>
      <div style="background-color: #e6f3ff; padding: 15px; border-radius: 5px;">
        <h3 style="color: #0066cc;">Review Summary</h3>
        <p>Unable to process the plan due to technical difficulties.</p>
      </div>
      <div style="font-size: 12px; color: #666; margin-top: 20px;">
        This email was automatically generated by CivicStream. The plan could not be processed due to technical difficulties.
      </div>`
  };
}